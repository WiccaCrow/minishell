Мини-оболочка
Прекрасна как shell

Резюме: цель этого проекта - создать простую оболочку. Да, свой маленький баш или зш. Вы узнаете много нового о процессах и файловых дескрипторах.

______________________________________
______________________________________

СОДЕРЖАНИЕ
I Введение ..............2
II Общие инструкции .....3
III Обязательная часть ..4
IV Бонус, часть .........6

______________________________________
______________________________________

Глава I

Вступление

Существование оболочек связано с самим существованием ИТ. В то время все кодировщики согласились, что общение с компьютером с использованием выровненных переключателей 1/0 серьезно раздражает. Было вполне логично, что им пришла в голову идея общаться с компьютером, используя интерактивные строки команд на языке, несколько близком к английскому.
С Minishell вы сможете путешествовать во времени и возвращаться к проблемам, с которыми люди сталкивались, когда Windows еще не существовало.

______________________________________
______________________________________

Глава II.

Общие инструкции


• Ваш проект должен быть написан в соответствии с Нормой. Если у вас есть бонусные файлы / функции, они включены в проверку нормы, и вы получите 0, если внутри есть ошибка нормы.

• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины, двойное освобождение и т. Д.), За исключением неопределенного поведения. Если это произойдет, ваш проект будет считаться нефункциональным и получит 0 во время оценки.

• Все пространство памяти, выделенное кучей, должно быть должным образом освобождено при необходимости. Утечки недопустимы.

• Если субъект требует этого, вы должны отправить Makefile, который скомпилирует ваши исходные файлы в требуемый вывод с флагами -Wall, -Wextra и -Werror, и ваш Makefile не должен повторно связываться.

• Ваш Makefile должен содержать как минимум правила $ (NAME), all, clean, fclean и re.

• Чтобы превратить бонусы в свой проект, вы должны включить бонус правила в свой Makefile, который добавит все различные заголовки, библиотеки или функции, запрещенные в основной части проекта. Бонусы должны быть в другом файле _bonus. {C / h}.
Оценка обязательной и бонусной части проводится отдельно.

• Если ваш проект позволяет вам использовать ваш libft, вы должны скопировать его исходный код и связанный с ним Makefile в папку libft с соответствующим Makefile. Makefile вашего проекта должен скомпилировать библиотеку, используя свой Makefile, а затем скомпилировать проект.

• Мы рекомендуем вам создавать программы тестирования для вашего проекта, даже если эту работу не нужно будет отправлять и оценивать. Это даст вам возможность легко проверить свою работу и работу коллег. Вы найдете эти тесты особенно полезными во время защиты. Действительно, во время защиты вы можете использовать свои тесты и / или тесты партнера, которого вы оцениваете.

• Отправьте свою работу в назначенный репозиторий git. Оцениваться будет только работа в репозитории git. Если DeepThreadt назначен для оценки вашей работы, это будет сделано после ваших оценок коллег. Если во время выставления оценок Deepoughtt в каком-либо разделе вашей работы произойдет ошибка, оценка будет остановлена.

______________________________________
______________________________________
Глава III.

Обязательная часть

 _______________________________________________________________________
| Название программы  	|  	minishell				|
|_______________________|_______________________________________________|
| Сдать файлы         	|						|
|_______________________|_______________________________________________|
| Makefile 	      	|  	Да					|
|_______________________|_______________________________________________|
| Аргументы           	|						|
|_______________________|_______________________________________________|
| Внешние функции     	|	printf,  malloc,   free,      write, 	|
|			|	open,    read,     close,     fork, 	|
|			|	wait,    waitpid,  wait3,     wait4, 	|
|			|	signal,  kill,     exit,      getcwd, 	|
|			|	chdir,   stat,     lstat,     fstat, 	|
|			|	execve,  dup,      dup2,      pipe, 	|
|			|	opendir, readdir,  closedir,  strerror, |
|			|	errno,   isatty,   ttyname,   ttyslot, 	|
|			|	ioctl,   getenv,   tcsetattr, tcgetattr,|
|			|	tgetent, tgetflag, tgetnum,   tgetstr, 	|
|			|	tgoto,   tputs				|
|_______________________|_______________________________________________|
| Libft авторизован Да	|						|
|_______________________|_______________________________________________|
| Описание 		|	Написать оболочку			|
|_______________________|_______________________________________________|

Ваша оболочка должна:
• Не используйте более одной глобальной переменной, подумайте об этом и будьте готовы объяснить, почему вы это делаете.
• Показывать подсказку при ожидании новой команды
• Найдите и запустите правильный исполняемый файл (на основе переменной PATH или с использованием относительного или абсолютного пути), как в bash
• Он должен реализовывать встроенные функции, как в bash:
	◦ echo с опцией ’-n’
	◦ cd только с относительным или абсолютным путем
	◦ pwd без опций
	◦ export без опций
	◦ unset без опций
	◦ env без опций и аргументов
	◦ exit без каких-либо опций

•  ; в команде следует разделять команды как в bash

•  ’ и " должны работать как в bash, за исключением многострочных команд.

•  Перенаправления <> «>>» должны работать как в bash, за исключением агрегирования файловых дескрипторов.

•  Трубы | должен работать как в bash, за исключением многострочных команд

•  Переменные среды ($, за которыми следуют символы) должны работать как в bash.

•  $? должно работать как в bash

•  ctrl-C, ctrl-D и ctrl- \ должны иметь тот же результат, что и в bash

•  Используйте стрелки вверх и вниз для навигации по команде, используя историю termcap (обязательная), которую мы затем сможем редактировать (по крайней мере, как мы можем для классических линий)
если нам хочется (линия, а не история). 

______________________________________
______________________________________
Глава IV.

Бонусная часть

• Если обязательная часть не идеальна, даже не думайте о бонусах.

• Не обязательно использовать все бонусы.

• Перенаправление «<<» как в bash

• Предварительная история и редактирование строк с помощью Termcaps (вы должны использовать только авторизованные функции)

◦ Отредактируйте строку, в которой находится курсор.

◦ Перемещайте курсор влево и вправо, чтобы иметь возможность редактировать строку в определенном месте. Очевидно, что новые символы должны быть вставлены между существующими аналогично классической оболочке.

◦ Вырезайте, копируйте и / или вставляйте всю линию или ее часть, используя желаемую последовательность клавиш.

◦ Перемещайтесь по слову влево или вправо, используя ctrl + LEFT и ctrl + RIGHT.

◦ Переходите непосредственно к началу или концу строки, нажимая кнопки «домой» и «конец».

◦ Напишите И отредактируйте команду в несколько строк. В этом случае нам бы хотелось, чтобы ctrl + UP и ctrl + DOWN позволяли переходить от одной строки к другой в команде, оставаясь в том же столбце или в другом наиболее подходящем столбце.

• &&, || со скобками для приоритетов, как в bash

• wilcard * как в bash